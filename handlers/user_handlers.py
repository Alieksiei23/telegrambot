
from database.database import conn, data_base
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import CallbackQuery, Message, FSInputFile
from keyboards.replykeyboard import start_keyboard
from keyboards.interkeyboard import (about_me_keyboard, inline_princip, inline_portfolio,
                                     calculate_hard, calculate_period, amount_marks, choice_menu, logo_key,
                                     poligraf_key, smm_key, merch_key, content_key)





router = Router()
portfolio = ['1.jpg', '2.jpg', '3.jpg', '4.jpg', '5.jpg', '6.jpg', '7.jpg', '8.jpg', '9.jpg', '10.jpg', '11.jpg', '12.jpg', '13.jpg']

# —Å—Ç–∞—Ä—Ç
@router.message(CommandStart())
async def cmd_start(message: Message):
    cursor = conn.cursor()
    cursor.execute(f"INSERT INTO users(user_id, username, name, date) VALUES('{message.from_user.id}', '{message.from_user.username}', '{message.from_user.first_name}', 'NOW()')")
    conn.commit()
    if message.from_user.id not in data_base:
        data_base[message.from_user.id] = [0, 0]
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø - —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ö—Å—é—à–∏, –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –ü–æ–º–æ–≥—É:'
        '\n‚ú®–£–∑–Ω–∞—Ç—å –æ –º–æ–µ–º –ø–æ–¥—Ö–æ–¥–µ –∫ –¥–∏–∑–∞–π–Ω—É'
        '\nüí°–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞'
        '\nüìÇ–ü–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫—Ä—É—Ç—ã–µ –±—Ä–µ–Ω–¥—ã',
        reply_markup=start_keyboard
    )


@router.message(Command('help'))
async def cmd_start(message: Message):
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é!',
        reply_markup=start_keyboard
    )

@router.callback_query(F.data=='about_me')
@router.message(F.text=='–û–±–æ –º–Ω–µ!')
async def about_me(message: Message | CallbackQuery):
    if isinstance(message, Message):
        await message.answer(
        "<b>–Ø ‚Äî –ö—Å—é—à–∞</b> üòä, –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–∏ –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. üé®\n"
        "–ó–∞ <b>18 –º–µ—Å—è—Ü–µ–≤</b> –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ –∫—Ä—É–ø–Ω–æ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏ —è –Ω–∞—É—á–∏–ª–∞—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚öñÔ∏è "
        "–º–µ–∂–¥—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏. ‚ú®\n\n"
        "<b>–í –º–æ–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b> –±—Ä–µ–Ω–¥–∏–Ω–≥ üè∑Ô∏è, –ø–µ—á–∞—Ç–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è üñ®Ô∏è, –Ω–∞—Ä—É–∂–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ üì¢ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã üíª, "
        "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. üîç",
        reply_markup=about_me_keyboard
        )
    else:
        await message.answer()
        await message.message.edit_text(
        "<b>–Ø ‚Äî –ö—Å—é—à–∞</b> üòä, –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∏–¥–µ–∏ –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. üé®\n"
        "–ó–∞ <b>18 –º–µ—Å—è—Ü–µ–≤</b> –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞ –∫—Ä—É–ø–Ω–æ–º –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏ —è –Ω–∞—É—á–∏–ª–∞—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚öñÔ∏è "
        "–º–µ–∂–¥—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏. ‚ú®\n\n"
        "<b>–í –º–æ–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b> –±—Ä–µ–Ω–¥–∏–Ω–≥ üè∑Ô∏è, –ø–µ—á–∞—Ç–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è üñ®Ô∏è, –Ω–∞—Ä—É–∂–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ üì¢ –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã üíª, "
        "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. üîç",
            reply_markup=about_me_keyboard
        )


@router.callback_query(F.data=='princ')
async def princ_func(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "–í —Ä–∞–±–æ—Ç–µ —Å–æ—á–µ—Ç–∞—é –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å ü§Ø —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π ü´°.\n"
    "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏ üí° –∏ –≤—Å–µ–≥–¥–∞ –ø–æ–º–Ω—é –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö üòá.\n"
    "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞ –∫ –¥–µ—Ç–∞–ª—è–º –∏ –æ—Ç–∫—Ä—ã—Ç–∞ –∫ –¥–∏–∞–ª–æ–≥—É üòâ.\n"
    "–í —Ä–∞–±–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É—é:\n"
    "<b><i>Adobe Illustrator</i></b>, <b><i>Adobe Photoshop</i></b>, <b><i>Figma</i></b>.",
        reply_markup=inline_princip
    )


@router.callback_query(F.data=='contacts')
async def contacts_func(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        ''
    )

@router.message(F.text == '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ')
async def send_portfolio(message: Message):
    data_base[message.from_user.id][0] = 0
    await message.answer_photo(photo=FSInputFile('1.jpg'), reply_markup=inline_portfolio)

@router.callback_query(F.data == 'next')
async def next_slide(callback: CallbackQuery):
    if data_base[callback.from_user.id][0] == len(portfolio)-1:
        await callback.answer()
        await callback.message.answer_photo(photo=FSInputFile(portfolio[data_base[callback.from_user.id][0]]),
                                            reply_markup=inline_portfolio)
    else:
        await callback.answer()
        data_base[callback.from_user.id][0] += 1
        await callback.message.answer_photo(photo=FSInputFile(portfolio[data_base[callback.from_user.id][0]]), reply_markup=inline_portfolio)
    await callback.message.delete()

@router.callback_query(F.data == 'back')
async def back_slide(callback: CallbackQuery):
    if data_base[callback.from_user.id][0] == 0:
        await callback.answer()
        await callback.message.answer_photo(photo=FSInputFile(portfolio[data_base[callback.from_user.id][0]]),
                                            reply_markup=inline_portfolio)
    else:
        await callback.answer()
        data_base[callback.from_user.id][0] -= 1
        await callback.message.answer_photo(photo=FSInputFile(portfolio[data_base[callback.from_user.id][0]]),
                                                  reply_markup=inline_portfolio)
    await callback.message.delete()

@router.message(F.text=='–†–∞—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å')
async def calculate_cashe(message: Message):
    await message.answer(
        text='–£–∫–∞–∂–∏ —Ä–∞–±–æ—Ç—É –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å!',
        reply_markup=choice_menu
    )


@router.callback_query(F.data == 'cancel')
async def price1(callback: CallbackQuery):
    data_base[callback.from_user.id][1] = 0
    await callback.answer()
    await callback.message.delete()



@router.callback_query(F.data.in_(['logo', 'poligraf', 'smm', 'merch', 'content']))
async def price1(callback: CallbackQuery):
    await callback.answer()
    if callback.data=='logo':
        await callback.message.edit_text('–ö–∞–∫–æ–π –±—Ä–µ–Ω–¥–∏–Ω–≥ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?',reply_markup=logo_key)
    elif callback.data=='poligraf':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—é!',reply_markup=poligraf_key)
    elif callback.data=='smm':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∫–ª–∞–º—ã!',reply_markup=smm_key)
    elif callback.data=='merch':
        await callback.message.edit_text('–ö–∞–∫–æ–π –º–µ—Ä—á –≤—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ?',reply_markup=merch_key)
    elif callback.data=='content':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!',reply_markup=content_key)


@router.callback_query(F.data.in_(['logo1', 'logo2']))
async def price1(callback: CallbackQuery):
    if callback.data=='logo1':
        data_base[callback.from_user.id][1] = 70
    elif callback.data=='logo2':
        data_base[callback.from_user.id][1] = 100
    await callback.answer()
    await callback.message.edit_text(
        '–ö–∞–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞?',
        reply_markup=calculate_hard
    )

@router.callback_query(F.data.in_(['poligraf1', 'poligraf2', 'poligraf3']))
async def price1(callback: CallbackQuery):
    if callback.data=='poligraf1':
        data_base[callback.from_user.id][1] = 50
    elif callback.data=='poligraf2':
        data_base[callback.from_user.id][1] = 70
    elif callback.data == 'poligraf3':
        data_base[callback.from_user.id][1] = 100
    await callback.answer()
    await callback.message.edit_text(
        '–ö–∞–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞?',
        reply_markup=calculate_hard
    )

@router.callback_query(F.data.in_(['smm1', 'smm2', 'smm3', 'smm4', 'smm5']))
async def price1(callback: CallbackQuery):
    if callback.data=='smm1':
        data_base[callback.from_user.id][1] = 60
    elif callback.data=='smm2':
        data_base[callback.from_user.id][1] = 65
    elif callback.data == 'smm3':
        data_base[callback.from_user.id][1] = 70
    elif callback.data == 'smm4':
        data_base[callback.from_user.id][1] = 75
    elif callback.data == 'smm5':
        data_base[callback.from_user.id][1] = 80
    await callback.answer()
    await callback.message.edit_text(
        '–ö–∞–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞?',
        reply_markup=calculate_hard
    )

@router.callback_query(F.data.in_(['merch1', 'merch2', 'merch3']))
async def price1(callback: CallbackQuery):
    if callback.data=='merch1':
        data_base[callback.from_user.id][1] = 100
    elif callback.data=='merch2':
        data_base[callback.from_user.id][1] = 150
    elif callback.data == 'merch3':
        data_base[callback.from_user.id][1] = 50
    await callback.answer()
    await callback.message.edit_text(
        '–ö–∞–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞?',
        reply_markup=calculate_hard
    )

@router.callback_query(F.data.in_(['content1', 'content2', 'content3']))
async def price1(callback: CallbackQuery):
    if callback.data=='content1':
        data_base[callback.from_user.id][1] = 150
    elif callback.data=='content2':
        data_base[callback.from_user.id][1] = 100
    elif callback.data == 'content3':
        data_base[callback.from_user.id][1] = 70
    await callback.answer()
    await callback.message.edit_text(
        '–ö–∞–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞?',
        reply_markup=calculate_hard
    )


@router.callback_query(F.data.in_(['easy', 'medium', 'hard']))
async def hard_skills(callback: CallbackQuery):
    if callback.data=='medium':
        data_base[callback.from_user.id][1] = data_base[callback.from_user.id][1] * 1.15
    elif callback.data=='hard':
        data_base[callback.from_user.id][1] = data_base[callback.from_user.id][1] * 1.5
    await callback.answer()
    await callback.message.edit_text(
        '–°—Ä–æ—á–Ω—ã–π –ª–∏ —É –≤–∞—Å –∑–∞–∫–∞–∑?',
        reply_markup=calculate_period
    )

@router.callback_query(F.data.in_(['standart', 'fast']))
async def hard_skills(callback: CallbackQuery):
    if callback.data=='fast':
        data_base[callback.from_user.id][1] = data_base[callback.from_user.id][1] * 1.5
    await callback.answer()
    await callback.message.edit_text(
        '–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–æ–∫ –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?',
        reply_markup=amount_marks
    )

@router.callback_query(F.data.in_(['marks1', 'marks2', 'marks3']))
async def hard_skills(callback: CallbackQuery):
    if callback.data=='marks2':
        data_base[callback.from_user.id][1] = data_base[callback.from_user.id][1] * 1.15
    elif callback.data=='marks3':
        data_base[callback.from_user.id][1] = data_base[callback.from_user.id][1] * 1.5
    await callback.answer()
    await callback.message.edit_text(
        f'–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç {data_base[callback.from_user.id][1]}—Ä'
        '\n—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∏—à–∏ –º–Ω–µ!',
    )
    data_base[callback.from_user.id][1] = 0
